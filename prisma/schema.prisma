// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  slug        String   @unique
  images      String[]
  category    String
  status      ProductStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  variants    ProductVariant[]
  cartItems   CartItem[]
  orderItems  OrderItem[]

  @@map("products")
}

model ProductVariant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  name      String
  sku       String   @unique
  price     Float
  inventory Int      @default(0)
  attributes Json?   // e.g., {"size": "M", "color": "red"}
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems CartItem[]
  orderItems OrderItem[]

  @@map("product_variants")
}

model Cart {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  guestToken  String?  @unique
  userId      String?  @db.ObjectId
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  items       CartItem[]
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("carts")
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String   @db.ObjectId
  productId String   @db.ObjectId
  variantId String   @db.ObjectId
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart      Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([cartId, variantId])
  @@map("cart_items")
}

model Promo {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  code        String     @unique
  name        String
  description String?
  type        PromoType
  value       Float      // percentage (0-100) or fixed amount
  minAmount   Float?     // minimum cart amount to apply promo
  maxDiscount Float?     // maximum discount amount (for percentage promos)
  usageLimit  Int?       // maximum number of uses
  usageCount  Int        @default(0)
  validFrom   DateTime
  validTo     DateTime
  status      PromoStatus @default(ACTIVE)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  orders      Order[]

  @@map("promos")
}

model Order {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber   String      @unique
  userId        String?     @db.ObjectId
  guestToken    String?
  status        OrderStatus @default(PENDING)
  subtotal      Float
  discount      Float       @default(0)
  total         Float
  promoId       String?     @db.ObjectId
  promoCode     String?
  customerInfo  Json        // name, email, address, etc.
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  user          User?       @relation(fields: [userId], references: [id])
  promo         Promo?      @relation(fields: [promoId], references: [id])
  items         OrderItem[]

  @@map("orders")
}

model OrderItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String   @db.ObjectId
  productId   String   @db.ObjectId
  variantId   String   @db.ObjectId
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  productName String   // snapshot of product name
  variantName String   // snapshot of variant name
  createdAt   DateTime @default(now())

  order       Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product        @relation(fields: [productId], references: [id])
  variant     ProductVariant @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   // Removed @unique to avoid transaction requirements
  password  String   // Hashed password
  name      String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  carts     Cart[]
  orders    Order[]

  @@map("users")
}

enum UserRole {
  ADMIN
  USER
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
}

enum PromoType {
  PERCENTAGE
  FIXED
}

enum PromoStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}
